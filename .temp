//----------------------------------------------------------------------
// State Outputs
//----------------------------------------------------------------------

localparam a_x   = 2'dx;
localparam a_ld  = 2'd0;
localparam a_b   = 2'd1;
localparam a_sub = 2'd2;

localparam b_x   = 1'dx;
localparam b_ld  = 1'd0;
localparam b_a   = 1'd1;

task set_cs
(
  input logic       cs_req_rdy,
  input logic       cs_resp_val,
  input logic [1:0] cs_a_mux_sel,
  input logic       cs_a_reg_en,
  input logic       cs_b_mux_sel,
  input logic       cs_b_reg_en
);
begin
  req_rdy      = cs_req_rdy;
  resp_val     = cs_resp_val;
  cs.a_reg_en  = cs_a_reg_en;
  cs.b_reg_en  = cs_b_reg_en;
  cs.a_mux_sel = cs_a_mux_sel;
  cs.b_mux_sel = cs_b_mux_sel;
end
endtask

// Labels for Mealy transistions

logic do_swap;
logic do_sub;

assign do_swap = ss.is_a_lt_b;
assign do_sub  = !ss.is_b_zero;

// Set outputs using a control signal "table"

always @(*) begin

  set_cs( 0, 0, a_x, 0, b_x, 0 );
  case ( state_reg )
    //                                 req resp a mux  a  b mux b
    //                                 rdy val  sel    en sel   en
    STATE_IDLE:                set_cs( 1,  0,   a_ld,  1, b_ld, 1 );
    STATE_CALC: if ( do_swap ) set_cs( 0,  0,   a_b,   1, b_a,  1 );
           else if ( do_sub  ) set_cs( 0,  0,   a_sub, 1, b_x,  0 );
    STATE_DONE:                set_cs( 0,  1,   a_x,   0, b_x,  0 );

  endcase

end

